import {
  array,
  boolean,
  infer as Infer,
  instanceof as InstanceOf,
  literal,
  null as Null,
  number,
  object,
  string,
  undefined as Undefined,
} from 'zod';

// This file is generated by runtyping (https://github.com/johngeorgewright/runtyping).
// Manual changes might be lost - proceed with caution!
export const AuthenticateUserReturnSchema = object({ token: string() });

export type AuthenticateUserReturnSchema = Infer<
  typeof AuthenticateUserReturnSchema
>;

export const CompanyReturnSchema = object({
  id: string(),
  name: string(),
  avatarUrl: string(),
});

export type CompanyReturnSchema = Infer<typeof CompanyReturnSchema>;

export const CompanyMembersReturnSchema = array(
  object({
    role: literal('adminMember').or(literal('member')),
    companyId: string(),
    recipientEmail: string(),
  }).or(
    object({
      user: object({
        id: string(),
        avatarUrl: string(),
        firstName: Null().or(string()),
        lastName: Null().or(string()),
        role: literal('user').or(literal('admin')),
        email: string(),
      }),
    }).and(
      object({
        role: literal('adminMember').or(literal('member')),
        companyId: string(),
        userId: string(),
      })
    )
  )
);

export type CompanyMembersReturnSchema = Infer<
  typeof CompanyMembersReturnSchema
>;

export const DeleteJobReturnSchema = object({ id: string() });

export type DeleteJobReturnSchema = Infer<typeof DeleteJobReturnSchema>;

export const HealthReturnSchema = object({ success: boolean() });

export type HealthReturnSchema = Infer<typeof HealthReturnSchema>;

export const InterviewsReturnSchema = array(
  object({
    votesLeft: number(),
    id: string(),
    createdAt: InstanceOf(Date),
    score: Null().or(number()),
    status: literal('initialized')
      .or(literal('proccessing'))
      .or(literal('ready')),
    answers: array(
      object({
        question: object({ id: string(), question: string(), time: number() }),
      })
    ),
    thumbnail: string(),
    interviewee: object({
      id: string(),
      firstName: Null().or(string()),
      lastName: Null().or(string()),
      avatarUrl: string(),
    }),
    rates: array(object({ value: Null().or(number()) })),
  })
);

export type InterviewsReturnSchema = Infer<typeof InterviewsReturnSchema>;

export const JobReturnSchema = object({
  id: string(),
  title: string(),
  deadline: InstanceOf(Date),
  description: Null().or(string()),
  questions: array(
    object({ id: string(), question: string(), time: number() })
  ),
});

export type JobReturnSchema = Infer<typeof JobReturnSchema>;

export const JobsReturnSchema = array(
  object({ id: string(), title: string(), deadline: InstanceOf(Date) })
);

export type JobsReturnSchema = Infer<typeof JobsReturnSchema>;

export const MyCompanyReturnSchema = object({
  id: string(),
  name: string(),
  website: Null().or(string()),
  description: Null().or(string()),
  avatarUploadUrl: string().or(Undefined()),
  avatarUrl: string(),
});

export type MyCompanyReturnSchema = Infer<typeof MyCompanyReturnSchema>;

export const MyInterviewsReturnSchema = array(
  object({
    id: string(),
    createdAt: InstanceOf(Date),
    status: literal('initialized')
      .or(literal('proccessing'))
      .or(literal('ready')),
    answers: array(
      object({
        question: object({ id: string(), question: string(), time: number() }),
      })
    ),
    thumbnail: string(),
    job: object({
      company: object({ id: string(), name: string(), avatarUrl: string() }),
    }).and(
      object({
        id: string(),
        description: Null().or(string()),
        createdAt: InstanceOf(Date),
        updatedAt: InstanceOf(Date),
        title: string(),
        deadline: InstanceOf(Date),
        questions: array(
          object({ id: string(), question: string(), time: number() })
        ),
        companyId: string(),
      })
    ),
  })
);

export type MyInterviewsReturnSchema = Infer<typeof MyInterviewsReturnSchema>;

export const ProfileReturnSchema = object({
  id: string(),
  avatarUrl: string(),
  avatarUploadUrl: string().or(Undefined()),
  email: string(),
  firstName: Null().or(string()),
  lastName: Null().or(string()),
  bio: Null().or(string()),
  issuer: string(),
  publicAddress: string(),
  linkedInProfile: Null().or(string()),
  resumeFileName: Null().or(string()),
  role: literal('user').or(literal('admin')),
  onboarded: boolean(),
  resumeUrl: string(),
  resumeUploadUrl: string().or(Undefined()),
});

export type ProfileReturnSchema = Infer<typeof ProfileReturnSchema>;

export const UpdateProfileReturnSchema = object({
  id: string(),
  avatarUrl: string(),
  avatarUploadUrl: string().or(Undefined()),
  email: string(),
  firstName: Null().or(string()),
  lastName: Null().or(string()),
  bio: Null().or(string()),
  issuer: string(),
  publicAddress: string(),
  linkedInProfile: Null().or(string()),
  resumeFileName: Null().or(string()),
  role: literal('user').or(literal('admin')),
  onboarded: boolean(),
  resumeUrl: string(),
  resumeUploadUrl: string().or(Undefined()),
});

export type UpdateProfileReturnSchema = Infer<typeof UpdateProfileReturnSchema>;

export const UpdateResumeReturnSchema = object({ id: string() });

export type UpdateResumeReturnSchema = Infer<typeof UpdateResumeReturnSchema>;

export const UpsertJobReturnSchema = object({ id: string() }).or(
  object({ id: string() })
);

export type UpsertJobReturnSchema = Infer<typeof UpsertJobReturnSchema>;
